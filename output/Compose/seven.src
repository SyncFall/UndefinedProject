

object FileNode extend visual
{
	visual elm;
	visual list;
	FileNode parent;
	string path;
	string name;
	bool isFolder;
	int depth=0;
	int depthWidth=0;
	int depthListWidth=0;
	int depthTextWidth=0;

	FileNode(FileNode parent, string path, bool isFolder, int depth)
	{
		this.parent = parent;
		this.path = path;
		if(isFolder){
			if(path.StartsWith(".\u005C")){
				this.name = path.Substring(2);
			}else{
				this.name = path;
			}
		}else{
			this.name += Path.GetFileName(path);
		}
		this.isFolder = isFolder;
		this.depth = depth;
		this.build(this.name);
	}

	func build(string n)
	{
		depthWidth = (depth * 12);
		depthListWidth = (depthWidth + 12);
		if(this.isFolder){
			elm = <block listener=elmListener marginLeft=depthWidth><image source="folder.png" height=12/>.n;</block>;
		}else{
			elm = <block listener=elmListener marginLeft=depthListWidth><image source="file.png" height=12/>.n;</block>;
		}
		list = <block/>;
		visual b = <block/>;
		b.add(elm, list);
		Visual = b.Visual;
	}

	func addEntry(FileNode child)
	{
		list.add(child.Visual);
		list.display = true;
	}

	func elmListener(InputEvent inevt)
	{
		if(inevt.Button.LeftClick){
			list.display = !list.display;
		}
		if(inevt.Visual.GainFocus){
			elm.Childrens[0].color = "#ff0000";
		}
		if(inevt.Visual.LostFocus){
			elm.Childrens[0].color = "#ffffff";
		}
	}
}


object FileExplorer extend visual
{
	FileNode Root;

	FileExplorer()
	{
		Root = new FileNode(null, "ROOT", true, 0);
		this.buildFolder(".", Root, 0);
		Visual = Root.Visual;
	}

	func buildFolder(string dir, FileNode parent, int depth)
	{
		if(dir.Contains("\\.")){
			return;
		} 
		FileNode folder = new FileNode(parent, dir, true, depth);
		if(dir != "."){
			parent.addEntry(folder);
			parent = folder;
		}
		string[] dirArr = Directory.GetDirectories(dir);
		for(int i=0; i<dirArr.Length; i++){
			this.buildFolder(dirArr[i], parent, depth+1);
		}
		string[] fileArr = Directory.GetFiles(dir);
		for(int i=0; i<fileArr.Length; i++){
			parent.addEntry(new FileNode(parent, fileArr[i], false, depth));
		}
	}
}