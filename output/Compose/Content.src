

## elementary-structure
block layout-structures flexibility


## elementary-composite

# change blocks
add, remove, depth, relative, absolute

# composite blocks
overlay, combine, path, shuffle

# change visibillity
toggle show and hide
fading in and out

# composite-segmenting
id, class


## scene-composite
generating static structure and code
functional application cases
component based object model state
solution model nodes


<inline>
	<block>Option</block>
	<block display=false>
		<block default=true>1</block>
		<block>2</block>
	</block>
</inline>

<select>
	<option default=true>1</option>
	<option>2</option>
</select>


object Option extend visual 
{
	Select select;
	string value;
	string text;

	Option(Select select, string value, string text)
	{
		this.value = value;
		this.text = text;
		build();
	}

	func build()
	{
		element = <line height=15px>text</line>;
		select.list.add(element);
	}
}

object Select extend visual
{
	visual view;
	visual list;
	int selectedOption;

	Select()
	{
		build();
	}
	
	func build()
	{
		element = <inline input=elmListener/>;
		view = <block input=viewListener/>
		list = <block input=listListener display=false/>
		element.add(view, list);
	}
	
	func selectOption(index)
	{
		selectedOption = index;
		view.content = list[selectedOption].content;
	}

	func elmListener(InputEvent input)
	{
		bool lostFocus = (input.Visual.LostFocus);
		if(lostFocus){
			view.display = true;
			list.display = false;
		}
	}

	func viewListener(InputEvent input)
	{
		bool showList = (input.Button.LeftClick);
		if(showList){
			view.display = false;
			list.display = true;
		}
	}

	func listListener(InputEvent input)
	{
		bool hover = (input.IsCursor);
		bool select = (input.Button.LeftClick);
		if(!hover && !select){
			return;
		}
		for(int i=0; i<list.Size; i++){
			visual item = list[i];
			if(GeometryUtils.IntersectVisual(item, input.Cursor)){
				if(hover){
					item.color = "#FF0000";
				}
				if(select){
					selectOption(i);
					break;
				}
			}else{
				if(hover){
					item.color = null;
				}	
			}
		}
	}
}
