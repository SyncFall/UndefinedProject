
object FileNode extend visual
{
	visual elm;
	visual list;
	string path;
	string name;
	bool isFolder;
	int depth;

	FileNode(string path, bool isFolder, int depth)
	{
		this.path = path;
		if(isFolder){
			if(path.StartsWith(".\u005C")){
				this.name = path.Substring(2);
			}else{
				this.name = path;
			}
		}else{
			this.name += Path.GetFileName(path);
		}
		this.isFolder = isFolder;
		this.depth = depth;
		this.build();
	}

	func build()
	{
		int depthFolderWidth = (depth * 16);
		int depthFileWidth = (depthFolderWidth + 16);
		if(this.isFolder){
			elm = <block listener=elmListener>.name</block>;
			this.add(elm);
			list = <block></block>;
			this.add(list);
		}else{
			elm = <block listener=elmListener>.name</block>;
			this.add(elm);
		}		
	}

	func addEntry(FileNode child)
	{
		list.Nodes.Add(child);
		list.display = true;
	}

	func elmListener(InputEvent inevt)
	{
		bool toogleList = (inevt.Button.LeftClick);
		if(list != null && toogleList){
			list.display = !list.display;
		}
	}
}


object FileExplorer extend visual
{
	FileNode RootNode;

	FileExplorer()
	{
		RootNode = new FileNode("ROOT", true, 0);
		this.buildFolder(".", RootNode, 0);
		this.content = <block width=150 height=300>.RootNode</block>;
	}

	func buildFolder(string dir, FileNode parent, int depth)
	{
		parent.addEntry(new FileNode(dir, true, depth));
		string[] dirArr = Directory.GetDirectories(dir);
		for(int i=0; i<dirArr.Length; i++){
			this.buildFolder(dirArr[i], parent, depth+1);
		}
		string[] fileArr = Directory.GetFiles(dir);
		for(int i=0; i<fileArr.Length; i++){
			parent.addEntry(new FileNode(fileArr[i], false, depth));
		}
	}
}

object Test extend visual
{
	FileExplorer explorer;

	Test()
	{
		this.explorer = new FileExplorer();
		this.content = this.explorer;
	}
}